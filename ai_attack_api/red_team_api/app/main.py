from fastapi import FastAPIfrom fastapi.responses import JSONResponsefrom fastapi.exceptions import RequestValidationErrorfrom fastapi.middleware.cors import CORSMiddlewarefrom app.endpoints import (    prompt_augmentation,    openAI_analyzeHTTP_transcation,    openAI_analyzeHTTP_transaction_scorer,    burp_suite_prompt_augmentation_plugin,    conversational_prompting,    burp_suite_extention_benchmarker,    analyze_http_requests_batch,    option_analyze,    export)from dotenv import load_dotenvimport osload_dotenv()app = FastAPI(    title="Red Team Attack API",    description="API for executing various red team attacks on LLMs, including single-shot attacks, multi-turn interactions, benchmarks, and prompt augmentation.",    version="1.0.0")# Middlewareapp.add_middleware(    CORSMiddleware,    allow_origins=["*"],  # Restrict in production    allow_credentials=True,    allow_methods=["*"],    allow_headers=["*"],)# Health Check@app.get("/health", tags=["Utility"])async def health_check():    return {"status": "healthy"}# Exception Handlers@app.exception_handler(RequestValidationError)async def validation_exception_handler(request, exc):    return JSONResponse(        status_code=400,        content={"detail": exc.errors(), "body": str(exc.body)},    )@app.exception_handler(Exception)async def global_exception_handler(request, exc):    return JSONResponse(        status_code=500,        content={"detail": "An unexpected error occurred."},    )# Include Routersapp.include_router(prompt_augmentation.router, prefix="/api/v1/prompt_augmentation")app.include_router(openAI_analyzeHTTP_transcation.router, prefix="/api/v1/analyzehttptransaction")app.include_router(openAI_analyzeHTTP_transaction_scorer.router, prefix="/api/v1/analyzehttptransaction_scorer")app.include_router(burp_suite_prompt_augmentation_plugin.router, prefix="/api/v1/burp_suite_prompt_augmentor")app.include_router(conversational_prompting.router, prefix="/api/v1/conversational_prompting")app.include_router(burp_suite_extention_benchmarker.router, prefix="/api/v1/burp_suite_extention_benchmarker")app.include_router(analyze_http_requests_batch.router, prefix="/api/v1")app.include_router(option_analyze.router, prefix="/api/v1/option_analyze")app.include_router(export.router, prefix="/api/v1")